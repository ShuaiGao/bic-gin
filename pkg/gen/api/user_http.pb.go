// Code generated by protoc-gen-bic. DO NOT EDIT.
// versions:2.0.0

package api

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"net/http"

	"github.com/gin-gonic/gin"
)

func RegisterUserServiceHttpHandler(g *gin.RouterGroup, srvs UserService) {
	tmp := &x_UserService{xx: srvs}
	g.GET("/v1/users/", tmp.GetUsers)
}

type UserService interface {
	GetUsers(ctx *gin.Context, in *RequestUsers) (out *ResponseUsers, code ErrCode)
}

// generated http handle
type UserServiceHttpHandler interface {
	GetUsers(ctx *gin.Context)
}

type x_UserService struct {
	xx UserService
}

// @Summary 获取用户列表
// @Tags    User-Service
// @Produce json
// @Param   page      query    uint32 true "页码"
// @Param   page_size query    uint32 true "每页数量"
// @Success 200       {object} ResponseUsers
// @Failure 401       {string} string "header need Authorization data"
// @Failure 403       {string} string "no api permission or no obj permission"
// @Router  /v1/users/ [GET]
func (x *x_UserService) GetUsers(ctx *gin.Context) {
	req := &RequestUsers{}
	if err := ctx.ShouldBindQuery(req); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"code": 400, "detail": "request error"})
		return
	}
	rsp, errCode := x.xx.GetUsers(ctx, req)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}
