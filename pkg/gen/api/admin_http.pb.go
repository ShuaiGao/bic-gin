// Code generated by protoc-gen-bic. DO NOT EDIT.
// versions:2.0.1

package api

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

func RegisterAdminServiceHttpHandler(g *gin.RouterGroup, srvs AdminService) {
	tmp := &x_AdminService{xx: srvs}
	g.GET("/v1/routes/", tmp.GetRoutes)
	g.GET("/v1/roles/", tmp.GetRoles)
	g.GET("/v1/role/:id/", tmp.GetRole)
}

type AdminService interface {
	GetRoutes(ctx *gin.Context) (out *ResponseRoute, code ErrCode)
	GetRoles(ctx *gin.Context) (out *ResponseRoles, code ErrCode)
	GetRole(ctx *gin.Context, id uint) (out *ResponseGetRole, code ErrCode)
}

// generated http handle
type AdminServiceHttpHandler interface {
	GetRoutes(ctx *gin.Context)
	GetRoles(ctx *gin.Context)
	GetRole(ctx *gin.Context)
}

type x_AdminService struct {
	xx AdminService
}

// @Summary 获取路由
// @Tags    Admin-Service
// @Produce json
// @Success 200 {object} ResponseRoute
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/routes/ [GET]
func (x *x_AdminService) GetRoutes(ctx *gin.Context) {
	rsp, errCode := x.xx.GetRoutes(ctx)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 获取角色列表
// @Tags    Admin-Service
// @Produce json
// @Success 200 {object} ResponseRoles
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/roles/ [GET]
func (x *x_AdminService) GetRoles(ctx *gin.Context) {
	rsp, errCode := x.xx.GetRoles(ctx)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 获取角色详情
// @Tags    Admin-Service
// @Produce json
// @Param   id  path     uint true "some id"
// @Success 200 {object} ResponseGetRole
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/role/:id/ [GET]
func (x *x_AdminService) GetRole(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil || id < 0 {
		ctx.JSON(http.StatusBadRequest, gin.H{
			"code":   400,
			"detail": "param id should be int",
		})
	}
	rsp, errCode := x.xx.GetRole(ctx, uint(id))

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}
