// Code generated by protoc-gen-bic. DO NOT EDIT.
// versions:2.0.1

package api

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

func RegisterAdminServiceHttpHandler(g *gin.RouterGroup, srvs AdminService) {
	tmp := &x_AdminService{xx: srvs}
	g.GET("/v1/apis", tmp.GetApis)
	g.GET("/v1/routes", tmp.GetRoutes)
	g.GET("/v1/roles", tmp.GetRoles)
	g.GET("/v1/role/:id", tmp.GetRole)
	g.GET("/v1/menus", tmp.GetMenus)
	g.GET("/v1/menu/:key/action", tmp.GetMenuAction)
	g.POST("/v1/menu/:key/action", tmp.PostMenuAction)
	g.PATCH("/v1/menu/action", tmp.PatchMenuAction)
}

type AdminService interface {
	GetApis(ctx *gin.Context) (out *ResponseApis, code ErrCode)
	GetRoutes(ctx *gin.Context) (out *ResponseRoute, code ErrCode)
	GetRoles(ctx *gin.Context) (out *ResponseRoles, code ErrCode)
	GetRole(ctx *gin.Context, id uint) (out *ResponseGetRole, code ErrCode)
	GetMenus(ctx *gin.Context) (out *ResponseGetMenus, code ErrCode)
	GetMenuAction(ctx *gin.Context, key string) (out *ResponseGetMenuAction, code ErrCode)
	PostMenuAction(ctx *gin.Context, in *RequestPostMenuAction, key string) (out *Empty, code ErrCode)
	PatchMenuAction(ctx *gin.Context, in *RequestPostMenuAction) (out *Empty, code ErrCode)
}

// generated http handle
type AdminServiceHttpHandler interface {
	GetApis(ctx *gin.Context)
	GetRoutes(ctx *gin.Context)
	GetRoles(ctx *gin.Context)
	GetRole(ctx *gin.Context)
	GetMenus(ctx *gin.Context)
	GetMenuAction(ctx *gin.Context)
	PostMenuAction(ctx *gin.Context)
	PatchMenuAction(ctx *gin.Context)
}

type x_AdminService struct {
	xx AdminService
}

// @Summary 获取接口列表
// @Tags    Admin-Service
// @Produce json
// @Success 200 {object} ResponseApis
// @Failure 401   {string} string   "header need Authorization data"
// @Failure 403   {string} string   "no api permission or no obj permission"
// @Router  /v1/apis [GET]
func (x *x_AdminService) GetApis(ctx *gin.Context) {
	rsp, errCode := x.xx.GetApis(ctx)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 获取路由
// @Tags    Admin-Service
// @Produce json
// @Success 200 {object} ResponseRoute
// @Failure 401   {string} string   "header need Authorization data"
// @Failure 403   {string} string   "no api permission or no obj permission"
// @Router  /v1/routes [GET]
func (x *x_AdminService) GetRoutes(ctx *gin.Context) {
	rsp, errCode := x.xx.GetRoutes(ctx)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 获取角色列表
// @Tags    Admin-Service
// @Produce json
// @Success 200 {object} ResponseRoles
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/roles [GET]
func (x *x_AdminService) GetRoles(ctx *gin.Context) {
	rsp, errCode := x.xx.GetRoles(ctx)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 获取角色详情
// @Tags    Admin-Service
// @Produce json
// @Param   id  path     uint true "some id"
// @Success 200 {object} ResponseGetRole
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/role/:id [GET]
func (x *x_AdminService) GetRole(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil || id < 0 {
		ctx.JSON(http.StatusBadRequest, gin.H{
			"code":   400,
			"detail": "param id should be int",
		})
	}
	rsp, errCode := x.xx.GetRole(ctx, uint(id))

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 获取菜单列表
// @Tags    Admin-Service
// @Produce json
// @Success 200 {object} ResponseGetMenus
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/menus [GET]
func (x *x_AdminService) GetMenus(ctx *gin.Context) {
	rsp, errCode := x.xx.GetMenus(ctx)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 获取菜单
// @Tags    Admin-Service
// @Produce json
// @Param   key path     string true "some id"
// @Success 200 {object} ResponseGetMenuAction
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/menu/:key/action [GET]
func (x *x_AdminService) GetMenuAction(ctx *gin.Context) {
	key := ctx.Param("key")
	rsp, errCode := x.xx.GetMenuAction(ctx, key)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 添加菜单页面行为
// @Tags    Admin-Service
// @Produce json
// @Param   key   path     string   true  "some id"
// @Param   key   body     string   true  "参数无注释"
// @Param   label body     string   true  "参数无注释"
// @Param   apis  body     []string false "对应api key列表"
// @Success 200   {object} object   null
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/menu/:key/action [POST]
func (x *x_AdminService) PostMenuAction(ctx *gin.Context) {
	req := &RequestPostMenuAction{}
	if err := ctx.ShouldBindJSON(req); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"code": 400, "detail": "request error"})
		return
	}
	key := ctx.Param("key")
	rsp, errCode := x.xx.PostMenuAction(ctx, req, key)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}

// @Summary 修改菜单页面行为
// @Tags    Admin-Service
// @Produce json
// @Param   key   body     string   true  "参数无注释"
// @Param   label body     string   true  "参数无注释"
// @Param   apis  body     []string false "对应api key列表"
// @Success 200   {object} object   null
// @Failure 401 {string} string "header need Authorization data"
// @Failure 403 {string} string "no api permission or no obj permission"
// @Router  /v1/menu/action [PATCH]
func (x *x_AdminService) PatchMenuAction(ctx *gin.Context) {
	req := &RequestPostMenuAction{}
	if err := ctx.ShouldBindJSON(req); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"code": 400, "detail": "request error"})
		return
	}
	rsp, errCode := x.xx.PatchMenuAction(ctx, req)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}
